package edu.ben.visual;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.metal.DefaultMetalTheme;
import javax.swing.plaf.metal.MetalLookAndFeel;

import edu.ben.model.BackEndBoard;
import edu.ben.model.ButtonListener;
import edu.ben.model.DinosaurGame;
import edu.ben.model.Sounds;

/**
 * "Splash Screen" - Main window, button Start Game takes it into Level 1, if
 * won, takes it to level 2 and level 3.
 * 
 * @author abdul;
 * @author mahrukhraheem;
 * @author haseebailham
 * @version 1.0
 */
public abstract class DinosaurGameGUI extends DinosaurFrame {

	/**
	 * Serial Version UID
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Board size global variable.
	 */
	protected final int BOARD_ROW = 10;

	/**
	 * Board column size for Level 1 and 2.
	 */
	protected int BOARD_COL = 17;
	/**
	 * level of the round being played
	 */
	protected int level;
	/**
	 * Button for grid, 10 x 17.
	 */
	protected JButton[][] btns = new JButton[BOARD_ROW][BOARD_COL];
	/**
	 * image icon for human level 1
	 */
	protected final ImageIcon human = new ImageIcon("humanGrass.PNG");

	/**
	 * image icon for human level 2
	 */
	protected final ImageIcon human2 = new ImageIcon("humanlvl2.PNG");

	/**
	 * image icon for human in level 3
	 */
	protected final ImageIcon human3 = new ImageIcon("humanGround.PNG");
	/**
	 * image icon for grass level 1
	 */
	protected final ImageIcon grass = new ImageIcon("grass.jpg");

	/**
	 * image icon for grass level 2
	 */
	protected final ImageIcon grass2 = new ImageIcon("l2grass.PNG");

	/**
	 * image icon for ground level 3
	 */
	protected final ImageIcon ground = new ImageIcon("ground.jpg");
	/**
	 * imageIcon for rock level 1
	 */
	protected final ImageIcon rock = new ImageIcon("rockOnGrass.png");

	/**
	 * imageIcon for rock level 2
	 */
	protected final ImageIcon rock2 = new ImageIcon("rockl2Grass.PNG");

	/**
	 * Image icon for tree
	 */
	protected final ImageIcon tree = new ImageIcon("treeGrass.PNG");

	/**
	 * Image icon for tree for level 2
	 */
	protected final ImageIcon tree2 = new ImageIcon("tree2.PNG");

	/**
	 * Image icon for berries
	 */
	protected final ImageIcon berries = new ImageIcon("berryBush.PNG");

	/**
	 * Image icon for volcano
	 */
	protected final ImageIcon volcano = new ImageIcon("volcanoGround.png");

	/**
	 * Image icon for boat half 1
	 */
	protected final ImageIcon boat1 = new ImageIcon("boat1.PNG");

	/**
	 * Image icon for boat half 2
	 */
	protected final ImageIcon boat2 = new ImageIcon("boat2.PNG");
	/**
	 * Image icon for speaker
	 */
	protected final ImageIcon speaker = new ImageIcon("speaker.png");

	/**
	 * rock button linked list
	 */
	private LinkedList<JButton> rocks = new LinkedList<JButton>();
	/**
	 * tree button linked list
	 */
	private LinkedList<JButton> trees = new LinkedList<JButton>();
	/**
	 * progress bar
	 */
	public JProgressBar progressBar;
	
	/**
	 * Current points label.
	 */
	public JLabel currPointsLabel;

	/**
	 * Start of health value.
	 */
	private int healthValue = 100;

	protected JPanel contentPane = new JPanel();

	/**
	 * Abstract gui class
	 * 
	 * @param game
	 *            DinosaurGame game obeject
	 */
	public DinosaurGameGUI(DinosaurGame game) {
		super(game);
		this.level = game.getLevel();
	}

	/**
	 * starts the action listener
	 */
	public abstract void startActionListener(DinosaurGame game);

	/**
	 * this method add the unique dinosaur and other icons per level
	 */
	public abstract void addLevelIcons(char[][] board);

	/**
	 * sets up the default icons for the buttons each level will need to add the
	 * icons of dinosaurs and others used for that level
	 * 
	 * @param board
	 *            char[][] the back end game board
	 */
	public JButton[][] setUpDefaultButtonIcons(char[][] board) {
		if (game.getLevel() == 3) {
			BOARD_COL = 12;
		}
		for (int i = 0; i < BOARD_ROW; i++) {
			for (int j = 0; j < BOARD_COL; j++) {
				if (board[i][j] == 'R') {
					if (game.getLevel() == 1) {
						btns[i][j].setIcon(rock);
						rocks.add(btns[i][j]);
					} else if (game.getLevel() == 2) {

						btns[i][j].setIcon(rock2);
						rocks.add(btns[i][j]);
					} else if (game.getLevel() == 3) {
						btns[i][j].setIcon(volcano);
					}
				} else if (board[i][j] == 'T') {
					btns[i][j].setIcon(berries);
					trees.add(btns[i][j]);
					// if (game.getLevel() == 2) {
					// btns[i][j].setIcon(tree2);
					// trees.add(btns[i][j]);
					// } else {
					// btns[i][j].setIcon(tree);
					// trees.add(btns[i][j]);
					// }
				} else if (board[i][j] == 'H') {
					if (game.getLevel() == 1) {
						btns[i][j].setIcon(human);
					} else if (game.getLevel() == 2) {
						btns[i][j].setIcon(human2);
					} else if (game.getLevel() == 3) {
						btns[i][j].setIcon(human3);
					}
				} else if (board[i][j] == 'E') { // sets the exit (rightmost column of the board)
					if (game.getLevel() == 1) {
						btns[i][j].setIcon(grass2);
					} else if (game.getLevel() == 2) {
						btns[i][j].setIcon(ground);
					} else if (game.getLevel() == 3) {
						btns[4][11].setIcon(boat1);
						btns[5][11].setIcon(boat2);
					}
				}
			}
		}
		for (int i = 0; i < rocks.size(); i++) {
			if (game.getLevel() == 1) {
				rocks.get(i).setDisabledIcon(rock);
			} else if (game.getLevel() == 2) {
				rocks.get(i).setDisabledIcon(rock2);
			}
			rocks.get(i).setEnabled(false);
		}

		return btns;
	}

	// close frame method,
	/**
	 * sets up the healthBar
	 * 
	 * @return JPanel the healthBar panel
	 */
	public JPanel setUpHealthBar() {
		JPanel healthBarPanel = new JPanel();
		healthBarPanel.setBounds(1106, 70, 237, 71);
		// contentPane.add(healthBarPanel);
		// healthBarPanel.setLayout(null);

		// Progress bar:
		progressBar = new JProgressBar(0, 100);
		progressBar.setBounds(6, 779, 294, 71);
		healthBarPanel.setBackground(Color.BLACK);
		// starting health
		progressBar.setValue(healthValue);
		progressBar.setStringPainted(true);
		progressBar.setPreferredSize(new Dimension(237, 71));

		healthBarPanel.add(progressBar);
		progressBar.setUI(new ProgressBar());
		progressBar.setForeground(Color.GREEN.brighter());
		return healthBarPanel;
	}

	/**
	 * set up the grid panel
	 * 
	 * @return JPanel gameGrid Panel
	 */
	public JPanel setUpGameGrid() {
		JPanel gameGridPanel = new JPanel();
		gameGridPanel.setBounds(6, 6, 1088, 782);
		gameGridPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		gameGridPanel.setLayout(new BorderLayout(0, 0));
		gameGridPanel.setLayout(new GridLayout(0, 17, 1, 1));
		gameGridPanel.setBackground(new Color(0, 0, 0));
		// contentPane.add(gameGridPanel);
		return gameGridPanel;
	}

	/**
	 * Sets up quit level button level frame.
	 */
	public JButton setUpQuitLevelButton() {
		ImageIcon quit = new ImageIcon("quitLevel.png");
		JButton quitLevelButton = new JButton("");
		quitLevelButton.setActionCommand("quit");
		quitLevelButton.setBounds(1143, 705, 157, 71);
		quitLevelButton.setIcon(quit);
		quitLevelButton.setContentAreaFilled(false);
		quitLevelButton.setFocusPainted(false);
		quitLevelButton.setBorderPainted(false);

		// quitLevelButton.addActionListener(new ActionListener() {
		// @Override
		// public void actionPerformed(ActionEvent e) {
		// setVisible(false);
		// SplashScreenGUI frame = new SplashScreenGUI();
		// frame.setVisible(true);
		// }
		// });
		return quitLevelButton;
	}

	/**
	 * Sets up labels for level frame.
	 * @return Queue of labels.
	 */
	public Queue<JLabel> setUpLabels() {
		Queue<JLabel> lbls = new LinkedList<>();

		JLabel lblHealth = new JLabel("HEALTH");
		lblHealth.setForeground(Color.GREEN.brighter());
		lblHealth.setFont(new Font("Lucida Grande", Font.BOLD, 15));
		lblHealth.setBounds(1181, 48, 79, 16);
		lbls.add(lblHealth);

		JLabel lblPoints = new JLabel("POINTS");
		lblPoints.setFont(new Font("Lucida Grande", Font.BOLD, 15));
		lblPoints.setForeground(Color.ORANGE);
		lblPoints.setBounds(1199, 153, 61, 16);
		lbls.add(lblPoints);

		JLabel lblKey = new JLabel("KEY");
		lblKey.setForeground(new Color(153, 50, 204));
		lblKey.setFont(new Font("Lucida Grande", Font.BOLD, 15));
		lblKey.setBounds(1199, 256, 61, 16);
		lbls.add(lblKey);

		JLabel lblSoundOnOff = new JLabel("Sound On/Off:");
		lblSoundOnOff.setFont(new Font("Lucida Grande", Font.BOLD, 14));
		lblSoundOnOff.setForeground(new Color(211, 211, 211));
		lblSoundOnOff.setBounds(1156, 612, 127, 16);
		lbls.add(lblSoundOnOff);
		return lbls;
	}

	/**
	 * Sets up points panel for level frame.
	 * 
	 * @return points panel after setting up label.
	 */
	public JPanel setUpPointsPanel() {
		JPanel pointsPanel = new JPanel();
		pointsPanel.setBackground(new Color(250, 235, 215));
		pointsPanel.setBounds(1106, 174, 237, 71);
		pointsPanel.setLayout(null);
		
		currPointsLabel = new JLabel("10");
		currPointsLabel.setHorizontalAlignment(SwingConstants.CENTER);
		currPointsLabel.setFont(new Font("Lucida Grande", Font.BOLD, 30));
		currPointsLabel.setBounds(6, 6, 225, 59);
		currPointsLabel.setForeground(Color.BLACK);
		pointsPanel.add(currPointsLabel);
		return pointsPanel;
	}

	/**
	 * Sets up key panel.
	 * 
	 * @return JPanel for key.
	 */
	public JPanel setUpKeyPanel() {
		JPanel keyPanel = new JPanel();
		keyPanel.setBackground(new Color(250, 235, 215));
		keyPanel.setBounds(1106, 278, 237, 306);
		return keyPanel;
	}

	/**
	 * sets up the contentPane
	 * 
	 * @return content pane that holds the gui content
	 */
	public JPanel setUpContentPane() {

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 700, 500);
		setBounds(500, 20, 40, 40);
		setSize(new Dimension(1350, 815));
		contentPane = new JPanel();
		setContentPane(contentPane);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		contentPane.setBackground(Color.BLACK);
		return contentPane;
	}

	/**
	 * this method call the sound class which plays the music for the lvl
	 */
	public void sound() {
		if (level == 1) {
			Sounds.Level1.play();
		} else if (level == 2) {
			Sounds.Level2.play();
		} else if (level == 3) {

		}
	}

	/**
	 * Adds speaker buttons to level frame.
	 */
	public JButton addSpeakers() {
		JButton speakerButton = new JButton();
		speakerButton.setActionCommand("speaker");
		speakerButton.setIcon(speaker);
		speakerButton.setBounds(1183, 640, 58, 57);
		speakerButton.setContentAreaFilled(false);
		speakerButton.setFocusPainted(false);
		speakerButton.setBorderPainted(false);
		return speakerButton;
	}

	/**
	 * @return the btns
	 */
	public JButton[][] getBtns() {
		return btns;
	}

	/**
	 * @param btns
	 *            the btns to set
	 */
	public void setBtns(JButton[][] btns) {
		this.btns = btns;
	}

}
