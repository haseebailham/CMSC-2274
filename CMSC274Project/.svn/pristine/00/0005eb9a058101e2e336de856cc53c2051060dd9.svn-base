package testing;

import org.junit.Test;

import model.HealthBar;
import student.TestCase;

/**
 * This is the HealthBar test class
 * 
 * @author mraheem
 *
 */
public class HealthBarTest extends TestCase {
	/**
	 * This tests that if a t-rex did damage, and then the player ate fruit, they
	 * would have 30 indexes as false health
	 */
	@Test
	public void healthBarTestFruit() {
		HealthBar hb = new HealthBar();
		hb.changeHealth("trex");
		hb.changeHealth("fruit");

		int expected = 60;
		assertEquals(expected, hb.getHealthBar());

	}

	/**
	 * This tests that if a human had total health, and ate fruit, they would have
	 * no effect on the health-it would stay at 100
	 */
	@Test
	public void healthBarTestTotalHealth() {
		HealthBar hb = new HealthBar();
		hb.changeHealth("fruit");
		int expected = 100;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);
	}

	/**
	 * This tests that if a t-rex did damage, and then the player ate fruit, they
	 * have the correct amount of health (70 indexes)
	 */
	@Test
	public void healthBarTestTrexDmgAndFruit() {
		HealthBar hb = new HealthBar();
		hb.changeHealth("trex");
		hb.changeHealth("fruit");
		int expected = 60;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);
	}

	/**
	 * Tests if health is updated correctly when there has been previous damage to
	 * the human's health. Sets current health status to 40, so after damage is
	 * inflicted on human, assuming riddle is answered correctly, player will attain
	 * 20 points for health.
	 */
	@Test
	public void testPreviousDamageForHuman1() {
		HealthBar hb = new HealthBar();
		hb.setHealthBar(40);
		hb.changeHealth("fruit");
		int expected = 50;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);
	}

	/**
	 * Tests if health is updated correctly when there is carnivore (level 2
	 * dinosaurs) near human. Player will lose 30 points for health.
	 */
	@Test
	public void testCarnivoreDamageForHuman1() {
		HealthBar hb = new HealthBar();
		hb.changeHealth("carnivore");
		int expected = 70;
		assertEquals(expected, hb.getHealthBar());
	}

	/**
	 * Tests if health is empty, if empty, then player is dead.
	 */
	@Test
	public void testHealthBelow10InflictedHerbivoreDamage() {
		HealthBar hb = new HealthBar();
		hb.setHealthBar(10);
		hb.changeHealth("herbivore");
		int expected = 0;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);

	}

	/**
	 * This tests that the pterodactyl effect works properly
	 */
	@Test
	public void testHealthPterodactyl() {
		HealthBar hb = new HealthBar();
		hb.changeHealth("pterodactyl");
		int expected = 90;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);
	}

	/**
	 * This tests that the pterodactyl effect works properly
	 */
	@Test
	public void testHealthPterodactylPreset() {
		HealthBar hb = new HealthBar();
		hb.setHealthBar(40);
		hb.changeHealth("pterodactyl");
		int expected = 30;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);
	}

	/**
	 * This tests for a possible outcome in level 1
	 */
	@Test
	public void testPossibleLevel1() {
		HealthBar hb = new HealthBar();
		hb.changeHealth("fruit");
		for (int i = 0; i < 4; i++) {
			hb.changeHealth("herbivore");
		}
		hb.changeHealth("fruit");
		hb.changeHealth("fruit");
		int expected = 40;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);
	}

	/**
	 * This tests for a possible outcome in level 2
	 */
	@Test
	public void testPossibleLevel2() {
		HealthBar hb = new HealthBar();
		hb.changeHealth("pterodactyl");
		for (int i = 0; i < 3; i++) {
			hb.changeHealth("carnivore");
		}
		hb.changeHealth("fruit");
		int expected = 10;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);
	}

	/**
	 * This tests for a possible outcome in level 3
	 */
	@Test
	public void testPossibleLevel3() {
		HealthBar hb = new HealthBar();
		for (int i = 0; i < 2; i++) {
			hb.changeHealth("trex");
		}
		hb.changeHealth("fruit");
		int expected = 10;
		int actual = hb.getHealthBar();
		assertEquals(expected, actual);
	}

}
