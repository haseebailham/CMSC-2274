package model;

import java.util.Stack;

/**
 * based on the level given generates a 2-d char array that represents the back
 * end board also updates the board and removes the board
 * 
 * @author abdul
 *
 */
public class BackEndBoard {
	/**
	 * Board object
	 */
	private int extra = 0;
	private char[][] board;
	/**
	 * Rock counter
	 */
	private int rockCounter = 0;

	/**
	 * Tree counter
	 */
	private int treeCounter = 0;
	/**
	 * Level variable
	 */
	private int level = 0;

	/**
	 * Human object
	 */
	private Human human = new Human(0, board);

	/**
	 * DinoList object.
	 */
	private DinoList dl = new DinoList();

	private LavaMovement lm;

	/**
	 * Public constructor for BackEndBoardGenerator class.
	 * 
	 * @param board
	 *            character 2D array
	 * @param level
	 *            Level number
	 */
	public BackEndBoard(int level) {
		this.level = level;
		generateLevel(level);
		if (level == 3) {
			lm = new LavaMovement(board.length - 1);
		}
	}

	/**
	 * generates dino on the board
	 * 
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 * @param temp
	 *            its a dino object and based on the name of the dino passed in it
	 *            add its from teh i and j index
	 */
	public void addDino(int i, int j, Dino temp) {
		// temp takes the dino name and add based on the first Letter

		if (temp.getDinoName().equalsIgnoreCase("Ankylosaurus")) {
			if (clearSpot(i, j)) {
				board[i][j] = 'A';
			}
		} else if (temp.getDinoName().equalsIgnoreCase("Brachiosaurus")) {
			if (clearSpot(i, j)) {
				board[i][j] = 'B';
			}
		} else if (temp.getDinoName().equalsIgnoreCase("Velociraptor")) {
			if (clearSpot(i, j)) {
				board[i][j] = 'V';
			}
		} else if (temp.getDinoName().equalsIgnoreCase("Trex")) {
			if (clearSpot(i, j)) {
				board[i][j] = 'X';
			}
		}
		temp.setDinoX(i); // update dino location
		temp.setDinoY(j);
		temp.setLevel(level);
		dl.addDino(temp); // adds to dinoList which holds all the Dinosaurs
	}

	// display board method:
	/**
	 * Displays Board.
	 */
	public void displayBoard() {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if (board[i][j] == 0) {
					System.out.print("[ ]");
				} else
					System.out.print("[" + board[i][j] + "]");
			}

			System.out.println();
		}
		System.out.println();
	}

	/**
	 * Add the exit spaces based on the level of the game
	 * 
	 * @param level
	 *            the level the board need to create
	 */
	public void addExit(int level) {
		if (level == 1) {
			for (int i = 0; i < board.length; i++) {
				for (int j = 0; j < board[i].length; j++) {
					if (j == board[i].length - 1) {
						board[i][j] = 'E';
					}
				}
			}
		} else if (level == 2) {
			for (int i = 2; i < board.length - 2; i++) {
				for (int j = 16; j < board[i].length; j++) {
					if (j == board[i].length - 1) {
						board[i][j] = 'E';
					}
				}
			}
		} else {
			board[4][11] = 'E';
			board[5][11] = 'E';
		}
	}

	/**
	 * hard coded info per level still need to figure out lvl 2 and 3
	 * 
	 * @param level
	 *            the level to generate
	 * @return the generated level
	 */
	public char[][] generateLevel(int level) {
		if (level == 1) { // 11:R 7:T 4:A 4:B
			board = new char[10][17];
			Dino h1 = new Herbivore("Ankylosaurus");
			Dino h2 = new Herbivore("Ankylosaurus");
			Dino h3 = new Herbivore("brachiosaurus");
			Dino h4 = new Herbivore("brachiosaurus");
			Dino h5 = new Herbivore("Ankylosaurus");
			Dino h6 = new Herbivore("Ankylosaurus");
			Dino h7 = new Herbivore("brachiosaurus");
			Dino h8 = new Herbivore("brachiosaurus");
			Dino h9 = new Herbivore("brachiosaurus");
			Dino h10 = new Herbivore("Ankylosaurus");
			Dino h11 = new Herbivore("Ankylosaurus");
			Dino h12 = new Herbivore("brachiosaurus");
			Dino h13 = new Herbivore("Ankylosaurus");
			Dino h14 = new Herbivore("Ankylosaurus");
			Dino h15 = new Herbivore("brachiosaurus");
			// in ascending order

			addRock(0, 5);
			addRock(0, 1);
			addRock(0, 13);
			addRock(1, 4);
			addRock(1, 8);
			addRock(1, 10);
			addRock(1, 15);
			addRock(1, 12);
			addRock(2, 6);
			addRock(2, 14);
			addRock(3, 0);
			addRock(3, 2);
			addRock(3, 10);
			addRock(3, 12);
			addRock(4, 9);
			addRock(4, 6);
			addRock(4, 15);
			addRock(5, 1);
			addRock(5, 3);
			addRock(5, 7);
			addRock(5, 11);
			addRock(6, 9);
			addRock(6, 13);
			addRock(6, 15);
			addRock(7, 0);
			addRock(7, 5);
			addRock(7, 7);
			addRock(8, 3);
			addRock(8, 8);
			addRock(8, 13);
			addRock(9, 1);
			addRock(9, 15);

			addTree(0, 14);
			addTree(1, 1);
			addTree(3, 8);
			addTree(7, 10);
			addTree(9, 6);

			addDino(1, 2, h1);
			addDino(1, 14, h14);
			addDino(2, 10, h2);
			addDino(2, 0, h15);
			addDino(4, 4, h3);
			addDino(4, 14, h4);
			addDino(5, 6, h5);
			addDino(6, 0, h6);
			addDino(6, 11, h7);
			addDino(8, 7, h8);
			addDino(7, 2, h9);
			addDino(3, 7, h10);
			addDino(8, 14, h11);
			addDino(9, 11, h12);
			addDino(9, 4, h13);

			addHuman(9, 0);
			human.addNewPosition(9, 0);
			human.setBoard(board);
			human.setLevel(level);
			addExit(1);
		} else if (level == 2) { // 13:R 7:T 8:V
			dl.clear();
			board = new char[10][17];
			// was thinking of having the human start in the same row for where he exited
			// the previous level
			// and puts a rock close to where he starts
			human.addNewPosition(human.getHumanX(), 0);
			addHuman(human.getHumanX(), 0);
			// human.addNewPosition(i, j);//what to do with this
			human.setBoard(board);
			human.setLevel(level);
			if (human.getHumanX() - 2 >= 0) {
				addRock(human.getHumanX() - 2, 0);
			} else if (human.getHumanX() + 2 < board.length) {
				addRock(human.getHumanX() + 2, 0);
			}
			// in ascending order
			addRock(0, 7);
			addRock(1, 15);
			addRock(2, 9);
			addRock(3, 5);
			addRock(4, 12);
			addRock(5, 9);
			addRock(5, 2);
			addRock(7, 15);
			addRock(7, 6);
			addRock(8, 3);
			addRock(8, 9);
			addRock(9, 13);

			addTree(1, 12);
			addTree(2, 4);
			addTree(4, 14);
			addTree(4, 10);
			addTree(5, 6);
			addTree(7, 11);
			addTree(8, 1);

			addEgg(1, 3);
			addEgg(3, 11);
			addEgg(6, 4);
			addEgg(7, 8);
			addEgg(8, 15);

			Dino temp = new Velociraptor();
			Dino v1 = new Velociraptor();
			Dino v2 = new Velociraptor();
			Dino v3 = new Velociraptor();
			Dino v4 = new Velociraptor();
			Dino v5 = new Velociraptor();
			Dino v6 = new Velociraptor();
			Dino v7 = new Velociraptor();
			Dino v8 = new Velociraptor();
			dl.clear();
			addDino(0, 3, v1);
			addDino(3, 3, v2);
			addDino(2, 13, v3);
			addDino(4, 8, v4);
			addDino(5, 4, v5);
			addDino(6, 12, v6);
			addDino(7, 2, v7);
			addDino(9, 6, v8);

			addExit(2);
		} else if (level == 3) {
			dl.clear();
			board = new char[10][12];

			addRock(9, 0);// actually a volcano

			addEgg(4, 7);
			addEgg(7, 2);
			addTree(2, 7);
			addTree(6, 4);
			addTree(7, 6);
			addTree(8, 9);

			Dino tr = new Trex();
			addDino(0, 11, tr);

			human.addNewPosition(5, 0);
			addHuman(5, 0);
			human.setBoard(board);
			human.setLevel(level);

			addExit(3);
		}

		return board;
	}

	/**
	 * updates the board for human
	 * 
	 * @param i
	 *            row
	 * @param j
	 *            column
	 * @param obj
	 *            char for human
	 */
	public void placeCharBoard(int i, int j, char obj) {
		board[i][j] = obj;
		if (obj == 'H') {
			human.addNewPosition(i, j);
			human.setBoard(board);
		}
	}

	/**
	 * Clears the previous spot
	 * 
	 * @param removePrevPosition
	 *            the index holding the previous spot
	 */
	public void removeIndex(int[] removePrevPosition) {
		int x = removePrevPosition[0];
		int y = removePrevPosition[1];
		board[x][y] = 0;
	}

	/**
	 * removes the Char and replaces it with empty
	 * 
	 * @param i
	 *            rows
	 * @param j
	 *            column
	 */
	public void removeIndex(int i, int j) {
		board[i][j] = 0;
	}

	/**
	 * generates rock on the board
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] addRock(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'R';
			rockCounter++;
		}
		return board;
	}

	/**
	 * generates rock on the board
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] addEgg(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'P';
			rockCounter++;
		}
		return board;
	}

	/**
	 * add the human to board and update the Human`s position
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] addHuman(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'H';
		}
		return board;
	}

	/**
	 * generates trees on the board
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] addTree(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'T';
			treeCounter++;
		}
		return board;
	}

	/**
	 * generates trees on the board
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] addExit(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'E';
		}
		return board;
	}

	/**
	 * Spreads lava using Lava Movement class
	 * 
	 * @return true if lava moved without human false if lava got to human
	 */
	public boolean moveLava() {
		return lm.spread(board);
	}

	public Stack<Integer[]> newLavaPositions() {
		return lm.getLavaPos();
	}

	/**
	 * @return the board
	 */

	/**
	 * @return the rockCounter
	 */
	public int getRockCounter() {
		return rockCounter;
	}

	/**
	 * @param rockCounter
	 *            the rockCounter to set
	 */
	public void setRockCounter(int rockCounter) {
		this.rockCounter = rockCounter;
	}

	/**
	 * @return the treeCounter
	 */
	public int getTreeCounter() {
		return treeCounter;
	}

	/**
	 * @param treeCounter
	 *            the treeCounter to set
	 */
	public void setTreeCounter(int treeCounter) {
		this.treeCounter = treeCounter;
	}

	/**
	 * for displaying the char array
	 * 
	 * @param board
	 *            char[][] you want to display
	 */
	public void display(char[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if (board[i][j] == 0) {
					System.out.print("[ ]");
				} else {
					System.out.print("[" + board[i][j] + "]");
				}
			}
			System.out.println();
		}
	}

	/**
	 * checks if the char array index is empty (clear)
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 * @return true if the index is clear
	 */
	public boolean clearSpot(int i, int j) {
		return board[i][j] == 0;
	}

	/**
	 * Gets the back end board
	 * 
	 * @return board the back end board
	 */
	public char[][] getBoard() {
		return board;
	}

	/**
	 * Sets the back end of the board
	 * 
	 * @param board
	 *            the back end of the board to set
	 */
	public void setBoard(char[][] board) {
		this.board = board;
	}

	/**
	 * Gets the level number
	 * 
	 * @return the level
	 */
	public int getLevel() {
		return level;
	}

	/**
	 * @param level
	 *            the level number to set
	 */
	public void setLevel(int level) {
		this.level = level;
	}

	/**
	 * Gets d1
	 * 
	 * @return the dl
	 */
	public DinoList getDl() {
		return dl;
	}

	/**
	 * @param dl
	 *            the dl to set
	 */
	public void setDl(DinoList dl) {
		this.dl = dl;
	}

	/**
	 * gets the human
	 * 
	 * @return the human
	 */
	public Human getHuman() {
		return human;
	}

	/**
	 * sets the human
	 * 
	 * @param human
	 *            the human to set
	 */
	public void setHuman(Human human) {
		this.human = human;
	}

}
