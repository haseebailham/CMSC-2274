package edu.ben.model;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Stack;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JProgressBar;

import edu.ben.dino.Dino;
import edu.ben.dino.DinoList;
import edu.ben.human.Human;

/**
 * Button Listener. Implements Action Listener, and is used for each button in
 * all levels. Action performed method performs tasks when button is clicked by
 * user in the GUI.
 * 
 * @author haseebailham
 * @author akhan
 * @author mraheem
 * @version 1.0
 */
public class ButtonListener implements ActionListener {
	/**
	 * Health limit for Yellow color foreground in Progress Bar.
	 */
	public static final int HEALTH_YELLOW = 60;

	/**
	 * Health limit for Red color foreground in Progress Bar.
	 */
	public static final int HEALTH_RED = 30;

	/**
	 * Position x, current position of player x.
	 */
	private int posX;

	/**
	 * Position y, current position of player y.
	 */
	private int posY;

	/**
	 * JButton[][] buttons, GUI.
	 */
	private JButton[][] btns;

	/**
	 * class uses to call Board
	 */
	private BackEndBoard backEnd;
	/**
	 * Human class
	 */
	private Human human;

	/**
	 * current board
	 */
	private char[][] board;

	/**
	 * 
	 * JProgress Bar for Health.
	 */
	private JProgressBar progressBar;
	/**
	 * game object
	 */
	private DinosaurGame game;

	/**
	 * JLabel for points.
	 */
	private JLabel pointsLabel;

	/**
	 * dinosaur list
	 */
	private DinoList dl;

	private int level = 0;

	private Messages m = new Messages();

	/**
	 * Public constructor for ButtonListenerLevel1 class.
	 * 
	 * @param lvl
	 *            Level 1
	 * @param posX
	 *            Position x
	 * @param posY
	 *            Position y
	 * @param btns
	 *            buttons
	 */
	public ButtonListener(DinosaurGame game, int posX, int posY, JButton[][] btns, JProgressBar progressBar,
			JLabel pointsLabel) {
		this.posX = posX;
		this.posY = posY;
		this.btns = btns;
		this.game = game;
		this.backEnd = game.getBoard();
		this.human = backEnd.getHuman();
		this.board = backEnd.getBoard();
		this.progressBar = progressBar;
		this.dl = backEnd.getDl();
		this.pointsLabel = pointsLabel;
		level = game.getLevel();

	}

	/**
	 * Action performed method from ActionListener interface.
	 * 
	 * @param e
	 *            event passed in, which is the button clicked by user in GUI.
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		String event = e.getActionCommand();
		if (event.equals("speaker")) { // turns off speaker
			Sounds.off();
			ImageIcon speakerOff = new ImageIcon("speakerOff.png");
			JButton temp = (JButton) e.getSource();
			temp.setIcon(speakerOff);
			temp.setActionCommand("speakerOff");
		} else if (event.equals("speakerOff")) { // turns speaker back on
			Sounds.start();

			ImageIcon speakerOn = new ImageIcon("speaker.png");
			JButton temp = (JButton) e.getSource();
			temp.setIcon(speakerOn);
			temp.setActionCommand("speaker");
		} else if (event.equals("quit")) {
			game.quitLevel();

		} else {
			dl.makeBubbles(board);
			if (isDinosaurZone()) {
				updateHealth(level);
				dinosaurDamageMessage();
			}

			if (!human.isDead()) {
				human.setTarget(posX, posY);
				// checks if player clicked on valid button
				if (human.moveHuman()) {
					// if human is stuck
					if (human.isStuck()) { // if the human is stuck
						HumanStuckMessage();
						game.closeFrame();
						// if human clicked on tree
					} else if (isEgg()) {
						human.setCurrentPoints(human.getPoints().calculatePoints(human.getCurrentPoints(), true));
						moveHuman();
					} else if (isTree()) {
						handleRiddle(level);
						// if human died
						if (human.isDead()) {
							lostGameMessage();
							game.closeFrame();
						}
						// if human clicked on exit button
					} else if (isExit()) {
						moveHuman();
						passLevel();
						if (level < 3) {
							game.closeFrame();
							game.nextLevel();
						}
					} else {
						moveHuman();
						if (human.isDead()) {
							lostGameMessage();
							game.closeFrame();
						}
					}
				} else { // no path
					invalidMove();
				}
			}
			if (human.isDead()) {
				lostGameMessage();
				game.closeFrame();
			}
		}
	}

	/**
	 * Removes icon from GUI, and removes previous position clicked by player.
	 * 
	 * @param btns
	 *            Buttons in frame of Lvl1GUI.
	 */
	public void removeIcon(JButton[][] btns) {
		/*
		 * removes prev player position, and removes icon. and updates board with the
		 * new character position.
		 */

		// get position from level object:
		int[] prev = human.removePrevPosition();
		/* If the player is on level 3, then the background is rocky not grassy */
		if (game.getLevel() == 3) {
			ImageIcon ground = new ImageIcon("ground.jpg");
			btns[prev[0]][prev[1]].setIcon(ground);
			backEnd.removeIndex(prev);
		} else if (game.getLevel() == 2) {// button's icon is back to level 2 grass
			ImageIcon l2grass = new ImageIcon("l2grass.PNG");
			btns[prev[0]][prev[1]].setIcon(l2grass);
			backEnd.removeIndex(prev);
		} else {
			// button's icon is back to level 1 grass
			ImageIcon grass = new ImageIcon("grass.jpg");
			btns[prev[0]][prev[1]].setIcon(grass);
			backEnd.removeIndex(prev);
		}
	}

	public boolean isEgg() {
		return board[posX][posY] == 'P';
	}

	/**
	 * Is button clear, check dinosaur board object if there are any character in
	 * the position.
	 * 
	 * @return true if it is clear, false if not.
	 */
	public boolean isClear() {
		return backEnd.clearSpot(posX, posY);
	}

	/**
	 * Checks if the button clicked on has a tree
	 * 
	 * @return true if the button has a tree
	 */
	public boolean isTree() {
		if (board[posX][posY] == 'T') {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Returns true if player clicked in a dinosaur zone.
	 * 
	 * @return true if in a dinosaur zone.
	 */
	public boolean isDinosaurZone() { // put into dinoList
		dl.makeBubbles(board);
		boolean foundHuman = false;
		for (int i = 0; i < dl.getSize(); i++) {
			if (dl.checkForHuman(i)) {
				return true;
			}

		}

		return foundHuman;
	}

	/**
	 * This method checks if the button clicked was part of the exit
	 * 
	 * @return true if the button was an exit button
	 */
	public boolean isExit() {
		if (board[posX][posY] == 'E') {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * This method goes through the steps to move the human to its new spot, and
	 * uses other methods to help it. It also lets the dinosaurs move after the
	 * human has moved
	 */
	public void moveHuman() {
		if (game.getLevel() == 2) {
			pterodactyl();
		}

		/*
		 * call method from level which uses back end and pathing classes to check for
		 * validity for movement to target (button clicked)
		 */
		removeIcon(btns);
		// (UPDATES BOARD) (then change posX, posY values and update Button)
		backEnd.placeCharBoard(posX, posY, 'H');
		moveDinosaurs();
		// (UPDATES BUTTON IMAGE) add new position to queue
		updateHumanIcon(posX, posY, game.getLevel());

		if (game.getLevel() == 3) {
			if (!backEnd.moveLava(dl.getPrevDinosaurLoctaion(0))) {
				// human dies:
				updateLavaButtons();
				m.humanKilledInLavaMessage(human.getCurrentPoints());
				game.closeFrame();
			} else {
				updateLavaButtons();
			}
		}

		human.setCurrentPoints(human.getPoints().calculatePoints(human.getCurrentPoints(), false));
		updatePointsPanel();

	}

	/**
	 * Updates lava buttons on GUI.
	 */
	public void updateLavaButtons() {
		Stack<int[]> lava = backEnd.newLavaPositions();
		ImageIcon lavaImage = new ImageIcon("lava.gif");
		while (!lava.isEmpty()) {
			int[] curr = lava.pop();
			btns[curr[0]][curr[1]].setIcon(lavaImage);
		}
	}

	/**
	 * This method moves the dinosaurs around on the board and calls other methods
	 * to help update other classes
	 */
	public void moveDinosaurs() {
		int[] prevDinosaurLoc = new int[2]; // hold prev dinosaurs location
		int[] newDinosaurLoc = new int[2]; // holds new dinosaurs location
		for (int i = 0; i < dl.getSize(); i++) {
			dl.moveDinosaurs(board, human.getHumanX(), human.getHumanY(), i);
			char obj = dl.getIndex(i).getCharName();
			prevDinosaurLoc = dl.getPrevDinosaurLoctaion(i); // gets the location for each dinosaur
			newDinosaurLoc = dl.getCurrentDinosaurLoctaion(i);
			backEnd.placeCharBoard(newDinosaurLoc[0], newDinosaurLoc[1], obj);
			backEnd.removeIndex(prevDinosaurLoc[0], prevDinosaurLoc[1]);
			updateButton(btns, newDinosaurLoc, obj);
			removeIcon(btns, prevDinosaurLoc, i, obj);
		}
		displayBubble(btns);

	}

	/**
	 * method is used to display a dinosaur bubble if the dinosaur is within range
	 * of the human
	 * 
	 * @param btns
	 *            JButton 2-d array
	 * @return btns with updated icons
	 */
	public JButton[][] displayBubble(JButton[][] btns) {
		dl.makeBubbles(board);
		human.makeBooleanBubble();
		ArrayList<Dino> temp = dl.checkNearHuman(human.getBubble().getRangeIndex());
		ArrayList<int[]> indexList = new ArrayList<int[]>();
		for (int i = 0; i < btns.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if (board[i][j] == 0) {
					if (game.getLevel() == 3) {
						ImageIcon ground = new ImageIcon("ground.jpg");
						btns[i][j].setIcon(ground);
					} else {
						updateGrassIcon(i, j, game.getLevel());
					}
				}
			}
		}
		if (temp.size() > 0) {
			ImageIcon bubbleGrass = null;
			if (game.getLevel() == 1) {
				bubbleGrass = new ImageIcon("grassYellow.jpg");

			} else if (level == 2) {
				bubbleGrass = new ImageIcon("grassOrg.jpg");

			} else if (level == 3) {
				bubbleGrass = new ImageIcon("groundRed.png");
			}
			for (int i = 0; i < temp.size(); i++) {
				indexList = temp.get(i).getBubble().getIndexList();
				for (int j = 0; j < indexList.size(); j++) {
					int x = indexList.get(j)[0];
					int y = indexList.get(j)[1];
					if (board[x][y] == 0) {
						btns[x][y].setIcon(bubbleGrass);
					}

				}

			}

		}
		return btns;

	}

	/**
	 * Removes dinosaur icon.
	 * 
	 * @param btns
	 *            buttons
	 * @param prev
	 *            previous button the dinosaur was on
	 * @param index
	 *            index
	 * @param obj
	 *            character representing the dinosaur on the game board
	 */
	public void removeIcon(JButton[][] btns, int[] prev, int index, char obj) {
		updateGrassIcon(prev[0], prev[1], game.getLevel());
	}

	/**
	 * Updates buttons
	 * 
	 * @param btns
	 *            Buttons
	 * @param newLocation
	 *            New location
	 * @param obj
	 *            Character representing the Object on the game board
	 */
	public void updateButton(JButton[][] btns, int[] newLocation, char obj) {
		int x = newLocation[0];
		int y = newLocation[1];
		if (obj == 'A') {
			final ImageIcon ank = new ImageIcon("ankyl.png");
			btns[x][y].setIcon(ank);
		} else if (obj == 'B') {
			final ImageIcon brach = new ImageIcon("brachGrass.PNG");
			btns[x][y].setIcon(brach);
		} else if (obj == 'V') {
			ImageIcon velo = new ImageIcon("velociraptor.PNG");
			btns[x][y].setIcon(velo);
		} else if (obj == 'X') {
			ImageIcon trex = new ImageIcon("trex3.PNG");
			btns[x][y].setIcon(trex);
		}
	}

	/**
	 * This method shows the riddle the user needs to answer
	 * 
	 * @param riddle
	 *            the riddle that needs to be answered
	 * @return the answer that the user gave
	 */
	public String treeRiddle(String riddle) {
		String answer = m.showRiddle(riddle);
		return answer;
	}

	/**
	 * This method determines if the answer the user gave was correct
	 * 
	 * @param correct
	 *            whether or not the answer was correct
	 */
	public void treeAnswer(boolean correct) {
		m.respondRiddle(correct);
	}

	/**
	 * This method displays a message to the user so they know they have passed this
	 * level
	 * 
	 * @param pass
	 *            whether or not the user passed the level
	 */
	public void passLevel() {
		if (game.getLevel() == 3) {
			m.escapeIsland(human.getCurrentPoints());
		} else {
			m.escapeLevel(human.getCurrentPoints());
		}
	}

	/**
	 * This method will display a message if the player clicked on a square that
	 * they are not able to get to
	 */
	public void invalidMove() {
		m.invalidMessage();
	}

	/**
	 * This method displays the messsage if the player lost the game
	 */
	public void lostGameMessage() {
		m.lostGameMessage(human.getCurrentPoints());
	}

	/**
	 * This method displays the messsage if the player lost the game
	 */
	public void HumanStuckMessage() {
		m.humanTrappedMessage(human.getCurrentPoints());
	}

	/**
	 * This method displays a message to the player if dinosaur damage was inflicted
	 * because human was in their zone.
	 */
	public void dinosaurDamageMessage() {
		if (game.getLevel() == 1) {
			m.herbMessage();
		} else if (game.getLevel() == 2) {
			m.veloMessage();
		} else if (game.getLevel() == 3) {
			m.rexMessage();
		}
	}

	/**
	 * This method will periodically send a pterodactyl towards the human
	 */
	public void pterodactyl() {
		if (m.pterodactlyMessage()) {
			human.getHealth().changeHealth("pterodactyl");
		}
	}

	/**
	 * This method will change the health of the human depending on which dinosaur
	 * is around them
	 * 
	 * @param level
	 *            the level that the player is currently on
	 */
	public void updateHealth(int level) {
		if (level == 1) {
			human.getHealth().changeHealth("herbivore");
		} else if (level == 2) {
			human.getHealth().changeHealth("carnivore");
		} else if (level == 3) {
			human.getHealth().changeHealth("trex");
		}

		updateProgressBar(human.getHealth().getHealthBar());
	}

	/**
	 * Updates progress bar in GUI.
	 * 
	 * @param health
	 *            current health of human.
	 */
	public void updateProgressBar(int health) {
		if (health <= HEALTH_YELLOW && health > HEALTH_RED) { // less than 60 and greater than 30
			progressBar.setForeground(Color.YELLOW);
			progressBar.setValue(health);
		} else if (health < HEALTH_RED && health >= 0) { // less than equal to 30
			progressBar.setForeground(Color.RED);
			progressBar.setValue(health);
		} else if (health >= HEALTH_YELLOW) { // greater than 60
			progressBar.setForeground(Color.GREEN.brighter());
			progressBar.setValue(health);
		}
	}

	/**
	 * Update Points in GUI
	 */
	public void updatePointsPanel() {
		int currPoints = human.getCurrentPoints();
		pointsLabel.setText(String.valueOf(currPoints));
	}

	/**
	 * This method will display the riddle to the player and decide if the asnwer
	 * given was correct
	 * 
	 * @param level
	 *            the level that the player is currently on
	 */
	public void handleRiddle(int level) {
		boolean correct;
		if (level == 1) {
			String riddle = human.getHealth().getR().giveRiddle();
			String playerAnswer = treeRiddle(riddle);
			correct = human.getHealth().getR().correctRiddleAnswer(riddle, playerAnswer);
		} else if (level == 2) {
			String riddle = human.getHealth().getR2().giveRiddle();
			String playerAnswer = treeRiddle(riddle);
			correct = human.getHealth().getR2().correctRiddleAnswer(riddle, playerAnswer);
		} else {
			String riddle = human.getHealth().getR3().giveRiddle();
			String playerAnswer = treeRiddle(riddle);
			correct = human.getHealth().getR3().correctRiddleAnswer(riddle, playerAnswer);
		}
		treeAnswer(correct);
		if (correct) {
			human.getHealth().changeHealth("fruit");
			human.setTarget(posX, posY);
			moveHuman();
			updateProgressBar(human.getHealth().getHealthBar());
		} else {
			board[posX][posY] = '\u0000';
			updateGrassIcon(posX, posY, game.getLevel());
		}
	}

	/**
	 * Updates the human icons
	 * 
	 * @param i
	 *            row i
	 * @param j
	 *            column j
	 * @param level
	 *            current level in game
	 */
	public void updateHumanIcon(int i, int j, int level) {
		final ImageIcon confetti = new ImageIcon("confettiExit.png");
		if (level == 1) {
			if (j == 16) {
				btns[i][j].setIcon(confetti);
			} else {
				if (isDinosaurZone()) {
					final ImageIcon humanRed = new ImageIcon("humanOnGrassRed.PNG");
					btns[i][j].setIcon(humanRed);
				} else {
					final ImageIcon human = new ImageIcon("humanGrass.PNG");
					btns[i][j].setIcon(human);
				}
			}
		} else if (level == 2) {
			if (j == 16 && i >= 2 && i <= 7) {
				btns[i][j].setIcon(confetti);
			} else {
				if (isDinosaurZone()) {
					final ImageIcon humanRed = new ImageIcon("humanlvl2Red.PNG");
					btns[i][j].setIcon(humanRed);
				} else {
					final ImageIcon human = new ImageIcon("humanlvl2.PNG");
					btns[i][j].setIcon(human);
				}
			}
		} else {
			if ((i == 4 && j == 11) || (i == 5 && j == 11)) {
				btns[i][j].setIcon(confetti);
			} else {
				if (isDinosaurZone()) {
					final ImageIcon humanRed = new ImageIcon("humanGroundRed.PNG");
					btns[i][j].setIcon(humanRed);
				}
				final ImageIcon human = new ImageIcon("humanGround.PNG");
				btns[i][j].setIcon(human);
			}
		}
	}

	/**
	 * Updates grass icon
	 * 
	 * @param i
	 *            row i
	 * @param j
	 *            column j
	 * @param level
	 *            current level in game
	 */
	public void updateGrassIcon(int i, int j, int level) {

		if (level == 1) {
			final ImageIcon icon = new ImageIcon("grass.jpg");
			btns[i][j].setIcon(icon);
		} else if (level == 2) {
			final ImageIcon icon = new ImageIcon("l2grass.PNG");
			btns[i][j].setIcon(icon);
		} else {
			final ImageIcon icon = new ImageIcon("ground.jpg");
			btns[i][j].setIcon(icon);
		}
	}
}
