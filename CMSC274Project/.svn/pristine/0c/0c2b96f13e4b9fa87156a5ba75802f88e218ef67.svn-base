
package edu.ben.human;

/**
 * node class used for pathing
 * 
 * @author abdul
 *
 */
public class Node implements Comparable<Object> {
	private int x;
	private int y;
	private double g = 0; // cost from node to node G(n) cost of path from start to node n
	private double h = 0; // total movement amount from point A to B
	private double f = 0; // G + H

	private Node parent;

	public Node(int x, int y) {
		this.x = x;
		this.y = y;
	}

	private boolean vaild; // if node is a vaild node for the path

	/**
	 * @return the x
	 */
	public int getX() {
		return x;
	}

	/**
	 * @param x
	 *            the x to set
	 */
	public void setX(int x) {
		this.x = x;
	}

	/**
	 * @return the y
	 */
	public int getY() {
		return y;
	}

	/**
	 * @param y
	 *            the y to set
	 */
	public void setY(int y) {
		this.y = y;
	}

	/**
	 * @return the g
	 */
	public double getG() {
		return g;
	}

	/**
	 * @param g
	 *            the g to set
	 */
	public void setG(double g) {
		this.g = g;
	}

	/**
	 * @return the h
	 */
	public double getH() {
		return h;
	}

	/**
	 * @param h
	 *            the h to set
	 */
	public void setH(double h) {
		this.h = h;
	}

	/**
	 * @return the f
	 */
	public double getF() {
		return f;
	}

	/**
	 * @param f
	 *            the f to set
	 */
	public void setF(double f) {
		this.f = f;
	}

	/**
	 * @return the parent
	 */
	public Node getParent() {
		return parent;
	}

	/**
	 * @param parent
	 *            the parent to set
	 */
	public void setParent(Node parent) {
		this.parent = parent;
	}

	/**
	 * @return the vaild
	 */
	public boolean isVaild() {
		return vaild;
	}

	/**
	 * @param vaild
	 *            the vaild to set
	 */
	public void setVaild(boolean vaild) {
		this.vaild = vaild;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		long temp;
		temp = Double.doubleToLongBits(f);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(g);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(h);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + ((parent == null) ? 0 : parent.hashCode());
		result = prime * result + (vaild ? 1231 : 1237);
		result = prime * result + x;
		result = prime * result + y;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Node))
			return false;
		Node other = (Node) obj;
		if (Double.doubleToLongBits(f) != Double.doubleToLongBits(other.f))
			return false;
		if (Double.doubleToLongBits(g) != Double.doubleToLongBits(other.g))
			return false;
		if (Double.doubleToLongBits(h) != Double.doubleToLongBits(other.h))
			return false;
		if (parent == null) {
			if (other.parent != null)
				return false;
		} else if (!parent.equals(other.parent))
			return false;
		if (vaild != other.vaild)
			return false;
		if (x != other.x)
			return false;
		if (y != other.y)
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Node [x=" + x + ", y=" + y + ", g=" + g + ", h=" + h + ", f=" + f + ", parent=" + parent + "]";
	}

	@Override
	public int compareTo(Object o) {
		Node temp = (Node) o;
		if (this.getF() > temp.getF()) {
			return -1;
		}
		if (this.getF() < temp.getF()) {
			return 1;
		}
		return 0;
	}

}
