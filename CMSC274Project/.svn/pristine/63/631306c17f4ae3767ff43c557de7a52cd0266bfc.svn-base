package model;

import java.util.ArrayList;
import java.util.LinkedList;

/**
 * Riddle class, holds all the riddles for level one needed to help the human
 * get more health points
 * 
 * @author mraheem
 * @version 1.0
 */
public class Riddles implements Riddle {
	private LinkedList<String> riddles = new LinkedList<String>();
	private String riddle1 = "What has hands but cannot clap?";
	private String riddle2 = "What is so delicate that saying its name breaks it?";
	private String riddle3 = "What kind of tree can you carry in your hand?";
	private String riddle4 = "What did the beach say when the tide came in?";
	private String riddle5 = "I am an odd number. Take away a letter and I become even. What number am I?";
	private String riddle6 = "What has a neck but no head?";
	private String riddle7 = "What can you catch but never throw?";
	private static ArrayList<Integer> possibleNums = new ArrayList<Integer>();

	/**
	 * Riddles constructor, which adds the possible numbers to the arraylist
	 */
	public Riddles() {
		possibleNums.add(1);
		possibleNums.add(2);
		possibleNums.add(3);
		possibleNums.add(4);
		possibleNums.add(5);
		possibleNums.add(6);
		possibleNums.add(7);
	}

	/**
	 * Creates the riddle linked list that stores the riddles
	 * 
	 * @return riddles, the linked list holding all the riddles
	 */
	@Override
	public LinkedList<String> riddlesList() {

		riddles.add(riddle1);
		riddles.add(riddle2);
		riddles.add(riddle3);
		riddles.add(riddle4);
		riddles.add(riddle5);
		riddles.add(riddle6);
		riddles.add(riddle7);
		return riddles;
	}

	/**
	 * This method returns the possible answers for riddle 1
	 * 
	 * @return a linked list of the possible answers for riddle 1
	 */
	public LinkedList<String> riddle1Answers() {
		LinkedList<String> answers = new LinkedList<String>();
		String[] answerOptions = { "clock", "a clock", "the clock", "my clock", "your clock", "watch", "a watch",
				"the watch", "my watch", "your watch" };
		for (int i = 0; i < answerOptions.length; i++) {
			answers.add(answerOptions[i]);
		}
		return answers;
	}

	/**
	 * This method returns the possible answers for riddle 3
	 * 
	 * @return a linked list of the possible answers for riddle 3
	 */
	public LinkedList<String> riddle3Answers() {
		LinkedList<String> answers = new LinkedList<String>();
		String[] answerOptions = { "palm", "a palm", "a palm tree", "palm tree" };
		for (int i = 0; i < answerOptions.length; i++) {
			answers.add(answerOptions[i]);
		}
		return answers;
	}

	/**
	 * This method returns the possible answers for riddle 4
	 * 
	 * @return a linked list of the possible answers for riddle 4
	 */
	public LinkedList<String> riddle4Answers() {
		LinkedList<String> answers = new LinkedList<String>();
		String[] answerOptions = { "long time no sea", "long time, no sea" };
		for (int i = 0; i < answerOptions.length; i++) {
			answers.add(answerOptions[i]);
		}
		return answers;
	}

	/**
	 * This method returns the possible answers for riddle 5
	 * 
	 * @return a linked list of the possible answers for riddle 5
	 */
	public LinkedList<String> riddle5Answers() {
		LinkedList<String> answers = new LinkedList<String>();
		String[] answerOptions = { "seven", "number 7", "number seven", "the number seven", "7", "#7", "# seven", "# 7",
				"#seven" };
		for (int i = 0; i < answerOptions.length; i++) {
			answers.add(answerOptions[i]);
		}
		return answers;
	}

	/**
	 * This method returns the possible answers for riddle 6
	 * 
	 * @return a linked list of the possible answers for riddle 6
	 */
	public LinkedList<String> riddle6Answers() {
		LinkedList<String> answers = new LinkedList<String>();
		String[] answerOptions = { "a bottle", "bottle", "the bottle", "my bottle", "your bottle", "water bottle",
				"a water bottle", "my water bottle", "the water bottle", "your water bottle" };
		for (int i = 0; i < answerOptions.length; i++) {
			answers.add(answerOptions[i]);
		}
		return answers;
	}

	/**
	 * This method returns the possible answers for riddle 6
	 * 
	 * @return a linked list of the possible answers for riddle 6
	 */
	public LinkedList<String> riddle7Answers() {
		LinkedList<String> answers = new LinkedList<String>();
		String[] answerOptions = { "a cold", "cold", "the cold" };
		for (int i = 0; i < answerOptions.length; i++) {
			answers.add(answerOptions[i]);
		}
		return answers;
	}

	/**
	 * This method checks if the answer the player gave is correct
	 * 
	 * @param riddle
	 *            the riddle array holding both the question and answer
	 * @param playerAnswer
	 *            the answer the player gives
	 * @return true if the player's answer is correct, false if it is incorrect
	 */
	@Override
	public boolean correctRiddleAnswer(String riddle, String playerAnswer) {
		// checks which riddle the player was asked and checks the appropriate list of
		// correct answers to see if the player answered correctly
		if (playerAnswer == null) {
			return false;
		}
		if (riddle.equals(riddle1)) {
			for (int i = 0; i < riddle1Answers().size(); i++) {
				if (riddle1Answers().get(i).equalsIgnoreCase(playerAnswer)) {
					return true;
				}
			}
		} else if (riddle.equals(riddle2)) {
			if (playerAnswer.equalsIgnoreCase("silence")) {
				return true;
			}
		} else if (riddle.equals(riddle3)) {
			for (int i = 0; i < riddle3Answers().size(); i++) {
				if (riddle3Answers().get(i).equalsIgnoreCase(playerAnswer)) {
					return true;
				}
			}
		} else if (riddle.equals(riddle4)) {
			for (int i = 0; i < riddle4Answers().size(); i++) {
				if (riddle4Answers().get(i).equalsIgnoreCase(playerAnswer)) {
					return true;
				}
			}
		} else if (riddle.equals(riddle5)) {
			for (int i = 0; i < riddle5Answers().size(); i++) {
				if (riddle5Answers().get(i).equalsIgnoreCase(playerAnswer)) {
					return true;
				}
			}
		} else if (riddle.equals(riddle6)) {
			for (int i = 0; i < riddle6Answers().size(); i++) {
				if (riddle6Answers().get(i).equalsIgnoreCase(playerAnswer)) {
					return true;
				}
			}
		} else if (riddle.equals(riddle7)) {
			for (int i = 0; i < riddle7Answers().size(); i++) {
				if (riddle7Answers().get(i).equalsIgnoreCase(playerAnswer)) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * This will give the riddle corresponding to the number being passed in
	 * 
	 * @param num
	 *            the number for the riddle
	 * @return proper riddle
	 */
	@Override
	public String giveRiddle(int num) {
		// possibleNums.remove(num);
		possibleNums.remove(Integer.valueOf(num));
		if (num == 1) {
			return riddle1;
		} else if (num == 2) {
			return riddle2;
		} else if (num == 3) {
			return riddle3;
		} else if (num == 4) {
			return riddle4;
		} else if (num == 5) {
			return riddle5;
		} else if (num == 6) {
			return riddle6;
		} else if (num == 7) {
			return riddle7;
		}
		return null;
	}

	/**
	 * @return the possibleNums the array holding the riddle numbers that have not
	 *         been asked yet
	 */
	public static ArrayList<Integer> getPossibleNums() {
		return possibleNums;
	}

	/**
	 * @param possibleNums
	 *            the possibleNums to set, which are the array holding the riddle
	 *            numbers that have not been asked yet
	 */
	public static void setPossibleNums(ArrayList<Integer> possibleNums) {
		Riddles.possibleNums = possibleNums;
	}
}
