package edu.ben.model;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Stack;

import edu.ben.dino.Dino;
import edu.ben.dino.DinoList;
import edu.ben.dino.Herbivore;
import edu.ben.dino.Trex;
import edu.ben.dino.Velociraptor;
import edu.ben.human.Human;

/**
 * Based on the level given generates a 2-d char array that represents the back
 * end board and updates the game board and removes the board
 * 
 * @author akhan
 * @author haseebailham
 * @author mraheem
 * @version 1.0
 */
public class BackEndBoard {
	
	/**
	 * Board object
	 */
	private char[][] board;
	
	/**
	 * Rock counter
	 */
	private int rockCounter = 0;

	/**
	 * Tree counter
	 */
	private int treeCounter = 0;
	
	/**
	 * Level variable
	 */
	private int level = 0;

	/**
	 * Human object
	 */
	private Human human = new Human(0, board);

	/**
	 * DinoList object.
	 */
	private DinoList dl = new DinoList();

	/**
	 * Lava movement object
	 */
	private LavaMovement lm;

	/**
	 * Public constructor for BackEndBoardGenerator class.
	 * 
	 * @param board
	 *            character 2D array
	 * @param level
	 *            Level number
	 */
	public BackEndBoard(int level) {
		this.level = level;
		try {
			createLevel(level);
		} catch (FileNotFoundException e) {
			System.out.println("The file was not found");
		}
		if (level == 3) {
			lm = new LavaMovement(board.length - 1);
		}
	}

	/**
	 * generates dino on the board
	 * 
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 * @param temp
	 *            its a dino object and based on the name of the dino passed in it
	 *            add its from the i and j index
	 */
	public void createDino(int i, int j, Dino temp) {
		// temp takes the dino name and add based on the first Letter

		if (temp.getDinoName().equalsIgnoreCase("Ankylosaurus")) {
			if (clearSpot(i, j)) {
				board[i][j] = 'A';
			}
		} else if (temp.getDinoName().equalsIgnoreCase("Brachiosaurus")) {
			if (clearSpot(i, j)) {
				board[i][j] = 'B';
			}
		} else if (temp.getDinoName().equalsIgnoreCase("Velociraptor")) {
			if (clearSpot(i, j)) {
				board[i][j] = 'V';
			}
		} else if (temp.getDinoName().equalsIgnoreCase("Trex")) {
			if (clearSpot(i, j)) {
				board[i][j] = 'X';
			}
		}
		temp.setDinoX(i); // update dino location
		temp.setDinoY(j);
		temp.setLevel(level);
		dl.addDino(temp); // adds to dinoList which holds all the Dinosaurs
	}

	// display board method:
	/**
	 * Displays Board.
	 */
	public void displayBoard() {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if (board[i][j] == 0) {
					System.out.print("[ ]");
				} else
					System.out.print("[" + board[i][j] + "]");
			}

			System.out.println();
		}
		System.out.println();
	}

	/**
	 * Add the exit spaces based on the level of the game
	 * 
	 * @param level
	 *            the level the board need to create
	 */
	public void addExit(int level) {
		if (level == 1) {
			for (int i = 0; i < board.length; i++) {
				for (int j = 0; j < board[i].length; j++) {
					if (j == board[i].length - 1) {
						createExit(i, j);
					}
				}
			}
		} else if (level == 2) {
			for (int i = 2; i < board.length - 2; i++) {
				for (int j = 16; j < board[i].length; j++) {
					if (j == board[i].length - 1) {
						createExit(i, j);
					}
				}
			}
		} else {
			createExit(4, 11);
			createExit(5, 11);
		}
	}

	/**
	 * hard coded info per level still need to figure out lvl 2 and 3
	 * 
	 * @param level
	 *            the level to generate
	 * @return the generated level
	 * @throws FileNotFoundException
	 *             if the file for a level is not found
	 */
	public char[][] createLevel(int level) throws FileNotFoundException {
		if (level == 1) { // 11:R 7:T 4:A 4:B
			board = new char[10][17];

			File lvl1 = new File("generateLevel1.txt");
			fileScan(lvl1);

			addExit(1);
		} else if (level == 2) { // 13:R 7:T 8:V
			dl.clear();
			board = new char[10][17];
			File lvl2 = new File("generateLevel2.txt");
			fileScan(lvl2);

			addExit(2);
		} else if (level == 3) {
			dl.clear();
			board = new char[10][12];
			File lvl3 = new File("generateLevel3.txt");
			fileScan(lvl3);
			/* the rock in this level is actually a volcano */

			addExit(3);
		}

		return board;
	}

	/**
	 * updates the board for human
	 * 
	 * @param i
	 *            row
	 * @param j
	 *            column
	 * @param obj
	 *            char for human
	 */
	public void placeCharBoard(int i, int j, char obj) {
		board[i][j] = obj;
		if (obj == 'H') {
			human.addNewPosition(i, j);
			human.setBoard(board);
		}
	}

	/**
	 * Clears the previous spot
	 * 
	 * @param removePrevPosition
	 *            the index holding the previous spot
	 */
	public void removeIndex(int[] removePrevPosition) {
		int x = removePrevPosition[0];
		int y = removePrevPosition[1];
		board[x][y] = 0;
	}

	/**
	 * removes the Char and replaces it with empty
	 * 
	 * @param i
	 *            rows
	 * @param j
	 *            column
	 */
	public void removeIndex(int i, int j) {
		board[i][j] = 0;
	}

	/**
	 * generates rock on the board
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] createRock(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'R';
			rockCounter++;
		}
		return board;
	}

	/**
	 * generates rock on the board
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] createEgg(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'P';
			rockCounter++;
		}
		return board;
	}

	/**
	 * add the human to board and update the Human`s position
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] createHuman(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'H';
		}
		return board;
	}

	/**
	 * generates trees on the board
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] createTree(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'T';
			treeCounter++;
		}
		return board;
	}

	/**
	 * generates trees on the board
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 */
	public char[][] createExit(int i, int j) {
		if (clearSpot(i, j)) {
			board[i][j] = 'E';
		}
		return board;
	}

	/**
	 * This method scans the given file and helps generate the back end of the board
	 * game with the info from the file
	 * 
	 * @param file
	 *            the file being passed in
	 * @throws FileNotFoundException
	 *             if the file does not exist
	 */
	public void fileScan(File file) throws FileNotFoundException {
		Scanner scan = new Scanner(file);
		if (file.canRead()) {
			while (scan.hasNextLine()) {
				String line = scan.nextLine();
				String indexes = line.substring(2);
				String[] location = indexes.split(",");
				int i = Integer.valueOf(location[0]);
				int j = Integer.valueOf(location[1]);

				if (line.startsWith("R")) {
					createRock(i, j);
				} else if (line.startsWith("T")) {
					createTree(i, j);
				} else if (line.startsWith("P")) {
					createEgg(i, j);
				} else if (line.startsWith("H")) {
					createHuman(i, j);
					human.addNewPosition(i, j);
					human.setBoard(board);
					human.setLevel(level);
				} else if (line.startsWith("A")) {
					Dino temp = new Herbivore("Ankylosaurus");
					dl.addDino(temp);
					createDino(i, j, temp);
				} else if (line.startsWith("B")) {
					Dino temp = new Herbivore("Brachiosaurus");
					createDino(i, j, temp);
				} else if (line.startsWith("V")) {
					Dino temp = new Velociraptor();
					createDino(i, j, temp);
				} else if (line.startsWith("X")) {
					Dino temp = new Trex();
					temp.setFoundHuman(true);
					createDino(i, j, temp);
				}
			}
		}
		scan.close();
	}

	/**
	 * Spreads lava using Lava Movement class
	 * 
	 * @return true if lava moved without human false if lava got to human
	 */
	public boolean moveLava(int[] dinoPrevPosition) {
		return lm.spread(board, dinoPrevPosition);
	}

	/**
	 * Gets new lava positions.
	 * 
	 * @return Stack integer type.
	 */
	public Stack<int[]> newLavaPositions() {
		return lm.getLavaPos();
	}

	/**
	 * @return the rockCounter
	 */
	public int getRockCounter() {
		return rockCounter;
	}

	/**
	 * @param rockCounter
	 *            the rockCounter to set
	 */
	public void setRockCounter(int rockCounter) {
		this.rockCounter = rockCounter;
	}

	/**
	 * @return the treeCounter
	 */
	public int getTreeCounter() {
		return treeCounter;
	}

	/**
	 * @param treeCounter
	 *            the treeCounter to set
	 */
	public void setTreeCounter(int treeCounter) {
		this.treeCounter = treeCounter;
	}

	/**
	 * for displaying the char array
	 * 
	 * @param board
	 *            char[][] you want to display
	 */
	public void display(char[][] board) {
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[i].length; j++) {
				if (board[i][j] == 0) {
					System.out.print("[ ]");
				} else {
					System.out.print("[" + board[i][j] + "]");
				}
			}
			System.out.println();
		}
	}

	/**
	 * checks if the char array index is empty (clear)
	 * 
	 * @param i
	 *            int i for the i index for 2-d array
	 * @param j
	 *            int j for the j index [i][j]
	 * @return true if the index is clear
	 */
	public boolean clearSpot(int i, int j) {
		return board[i][j] == 0;
	}

	/**
	 * Gets the back end board
	 * 
	 * @return board the back end board
	 */
	public char[][] getBoard() {
		return board;
	}

	/**
	 * Sets the back end of the board
	 * 
	 * @param board
	 *            the back end of the board to set
	 */
	public void setBoard(char[][] board) {
		this.board = board;
	}

	/**
	 * Gets the level number
	 * 
	 * @return the level
	 */
	public int getLevel() {
		return level;
	}

	/**
	 * @param level
	 *            the level number to set
	 */
	public void setLevel(int level) {
		this.level = level;
	}

	/**
	 * Gets d1
	 * 
	 * @return the dl
	 */
	public DinoList getDl() {
		return dl;
	}

	/**
	 * @param dl
	 *            the dl to set
	 */
	public void setDl(DinoList dl) {
		this.dl = dl;
	}

	/**
	 * gets the human
	 * 
	 * @return the human
	 */
	public Human getHuman() {
		return human;
	}

	/**
	 * sets the human
	 * 
	 * @param human
	 *            the human to set
	 */
	public void setHuman(Human human) {
		this.human = human;
	}

}
