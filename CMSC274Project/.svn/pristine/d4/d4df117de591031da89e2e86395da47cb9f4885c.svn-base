package edu.ben.tests;

import static org.junit.Assert.*;

import org.junit.Test;

import edu.ben.model.BackEndBoard;
import edu.ben.dino.Dino;
import edu.ben.dino.DinoList;
import edu.ben.dino.Herbivore;
import edu.ben.dino.Velociraptor;

/**
 * Test cases for dinoList class
 * 
 * @author abdul
 *
 */
public class DinoListTest {

	/**
	 * test the dinoList size for lvl 3
	 */
	@Test
	public void testLvl3DLSize() {
		BackEndBoard backEnd = new BackEndBoard(3);
		int actual = backEnd.getDl().getSize();
		int expected = 1;
		assertEquals(expected, actual);
	}

	/**
	 * test the dinoList size for lvl 1
	 */
	@Test
	public void testLvl1DLSize() {
		BackEndBoard backEnd = new BackEndBoard(1);
		int actual = backEnd.getDl().getSize();
		int expected = 15;
		assertEquals(expected, actual);
	}

	/**
	 * test the dinoList size for lvl 1
	 */
	@Test
	public void testLvl2DLSize() {
		BackEndBoard backEnd = new BackEndBoard(2);
		int actual = backEnd.getDl().getSize();
		int expected = 8;
		assertEquals(expected, actual);
	}

	@Test
	/**
	 * test the adding a dino to list
	 */
	public void DinoListTestLvl1() {
		DinoList dl = new DinoList();
		Dino temp = new Herbivore("ankylosaurus");
		dl.addDino(temp);
		Dino h = dl.getIndex(0);
		char actual = h.getCharName();
		char expected = 'A';
		assertEquals(actual, expected);
	}

	@Test
	/**
	 * test the adding a dino to list and moving
	 */
	public void DinoListTestLvl1MovmentAmount() {
		DinoList dl = new DinoList();
		Dino temp = new Herbivore("ankylosaurus");
		dl.addDino(temp);
		Dino h = dl.getIndex(0);
		int actual = h.getMovement();
		int expected = 1;
		assertEquals(expected, actual);
	}

	@Test
	/**
	 * test the adding a dino to list
	 */
	public void DinoListTestLvl2() {
		DinoList dl = new DinoList();
		Dino temp = new Velociraptor();
		dl.addDino(temp);
		Dino h = dl.getIndex(0);
		char actual = h.getCharName();
		char expected = 'V';
		assertEquals(actual, expected);
	}

	@Test
	/**
	 * test the adding a dino to list and moving
	 */
	public void DinoListTestLvl2MovmentAmount() {
		DinoList dl = new DinoList();
		Dino temp = new Velociraptor();
		dl.addDino(temp);
		Dino h = dl.getIndex(0);
		int actual = h.getMovement();
		int expected = 2;
		assertEquals(expected, actual);
	}

	@Test
	/**
	 * test movement for a dinosaur in the list
	 */
	public void DinoListTestLvl2Movment() {
		DinoList dl = new DinoList();
		Dino temp = new Velociraptor();
		char[][] board = new char[5][5];
		board[3][3] = 'H';
		board[1][1] = 'V';
		temp.setDinoX(1);
		temp.setDinoY(1);
		temp.setFoundHuman(true);
		dl.addDino(temp);
		dl.moveDinosaurs(board, 3, 3, 0);
		int[] actual = dl.getDinoList().get(0).getPrevLocation();
		int[] expected = { 1, 1 };
		assertArrayEquals(expected, actual);

	}

	@Test
	/**
	 * test movement for a dinosaur in the list a loop that runs 5 time to test 5
	 * different moves
	 */
	public void DinoListTestLvl2LoopedMovement() {
		DinoList dl = new DinoList();
		Dino temp = new Velociraptor();
		BackEndBoard b = new BackEndBoard(1);

		char[][] board = new char[8][8];
		board[7][7] = 'H';
		board[0][0] = 'V';
		temp.setDinoX(0);
		temp.setDinoY(0);
		temp.setFoundHuman(true);
		dl.addDino(temp);
		int[] prevDinosaurLoc = new int[2]; // hold prev dinosaurs location
		int[] newDinosaurLoc = new int[2]; // holds new dinosaurs location
		for (int i = 0; i < 5; i++) {
			dl.moveDinosaurs(board, 7, 7, 0);
			prevDinosaurLoc = dl.getPrevDinosaurLoctaion(0); // gets the location for each dinosaur
			newDinosaurLoc = dl.getCurrentDinosaurLoctaion(0);
			board[prevDinosaurLoc[0]][prevDinosaurLoc[1]] = 0;
			board[newDinosaurLoc[0]][newDinosaurLoc[1]] = 'V';
		}

		int[] actual = { dl.getDinoList().get(0).getDinoX(), dl.getDinoList().get(0).getDinoY() };
		int[] expected = { 6, 6 };
		assertArrayEquals(expected, actual);

	}

	@Test
	public void DinoListTestLvl2RandomMovment() {
		DinoList dl = new DinoList();
		Dino temp = new Velociraptor();
		char[][] board = new char[5][5];
		board[2][1] = 'V';
		temp.setDinoX(2);
		temp.setDinoY(1);
		dl.addDino(temp);
		dl.moveDinosaurs(board, 3, 3, 0);
		Dino h = dl.getIndex(0);
		int[] actual = h.getPrevLocation();
		int[] expected = { 2, 1 };
		assertArrayEquals(expected, actual);
	}
}
